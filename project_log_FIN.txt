250227:
Projektia rakennellaan rustc nightly -versiolla. Varmista, että nightly compiler on asennettu ja käytössä komennolla: rustup override set nightly
Tämä on oma löyhä dokumentointi tehdyistä toimenpiteistä. Tarkkoja ohjeita varten suosittelen lukemaan ja seuraamaan alkuperäistä tutoriaalia yllä mainitussa linkissä.

Tutoriaalin mukaisesti merkataan Cargo.toml >> edition 2018.

src/main.rs >> poistetaan käytöstä std-kirjasto ja perinteinen main-kutsu, koska emme halua, että Rust linkittää ohjelmaa mihinkään ulkoiseen kirjastoon, minkä se siis tekee oletuksena. Lisäksi tehdään samaan tiedostoon tarpeelliset toimenpiteet, eli panic-handler ja ohjelman aloituskohta, eli _start()-funktio.

#[no_mangle] -attribuutti kertoo kääntäjälle olla tekemättä omaa nimeä funktiolle.
Oletuksena kääntäjä antaa funktioille omat uniikit kjda+d8i32ijr3kr-nimet muistissa.

Cargo.toml >> lisätään panic-ohjeet profiileihin profile.dev ja profile.release.
Eli mikäli ohjelma (Rust) panikoi (panic!), eli kohtaa virheen, se suorittaa komennon "abort", eikä mitään muuta.

Luodaan .json-asetustiedosto projektin juureen >> "touch x86_64-kaa_os.json".
Tämä sisältää ohjeita kääntäjälle, mm. target systemin, ynnä muuta hauskaa ja mielenkiintoista, kuten edellä jo tehdyn panic-handler ohjeen "panic-strategy": "abort", minkä voimme nyt joko poistaa Cargo.toml-tiedostosta tai jättää sinne.

Huom! KAIKKI toimenpiteet tämän kaltaisen ohjelman rakentamisessa ovat tarkkoja ja tärkeitä.
Jonkin ohjeen tai asetuksen unohtaminen tai virhe ohjelmassa voi johtaa ikäviin seuraamuksiin!

Luodaan .cargo/ -kansio projektin juureen ja sinne config.toml-niminen tiedosto. Jos nyt et käytä rust nightly -versiota, niin ei toimi. Ellei jo aikaisemmin tullut ongelmia.

.cargo/config.toml >> lisätään ohjeita Cargolle projektin rakentamiseen liittyen, ja nämä ovat nyt niitä unstable-ominaisuuksia, joita on pakko käyttää, kun rakennetaan raudalle. Cargon täytyy rakentaa mm. erillinen std-kirjasto, koska ohjelmaa ei voida linkittää olemassa olevaan sellaiseen. Tarkoitus on rakentaa selfstanding-ohjelmisto ajettavaksi suoraan BIOSista. UEFI-tukea ei kuulemma vielä ole, tai ollut tutoriaalin kirjoittamisen aikaan, joten mekään emme sellaista lähde tässä yrittämään.

.cargo/config.toml >> "compiler-builtins-mem" korvaa C:n "memset" ynnä muut muistin varaamiseen ja hallintaan liittyvät toiminnot Rustin omilla. Näitä ominaisuuksia on pakko joka ohjelman sisältää ja yleensä ne on toteutettu C:llä.

.cargo/config.toml >> lisätään myös default target -ohjaus .json-tiedostoomme.

Sitten kirjoitellaan "Hello World" -tulostus src/main.rs:ään. Tässä tulee mielenkiintoista settiä, kun käytetään VGA text bufferia. Eli _start()-funktioon tulee nyt sisältöä, ihan oikeita suorituskäskyjä. Tässä vaiheessa ei ainakaan kannata tehdä virheitä!

BOOTIMAGE
Lisätään Cargo.toml -tiedostoon riippuvuus "bootloader". Tämän joku mestari voisi kirjoittaa itse, mutta ohjeessa onneksi käytetään valmista pakettia, jonka Rust lataa Cargolla ohjelmaan. Bootloader mm. alustaa prosessorin ja lataa ohjelman (kernelin) koneen suoritinmuistiin.

Cargo ei osaa ohjelman kääntämisen jälkeen linkittää sitä bootloaderiin, joten joudumme käyttämään tähän valmista ominaisuutta ja lisäämme sen komennolla "cargo install bootimage".

bootimage ei toimi ilman työkaluja, jotka saa käyttöön komennolla:
"rustup component add llvm-tools-preview".

NYT voimme luoda suoritettavan boot imagen, laittaa sen vaikka USB-tikulle ja käynnistää ohjelman koneen boot-menusta, jos tikku on kiinnitettynä porttiin. En ole kokeillut.

Tämän sijaan käytämme Linuxilla Qemu-nimistä ohjelmaa. Se on virtuaalikone, eli tietokone-emulaattori, jolla voimme testata käyttöjärjestelmämme toimivuutta.

"sudo apt-get install qemu-system"

Kun Qemu on asennettu, komennolla:
qemu-system-x86_64 -drive format=raw,file=target/x86_64-kaa_os/debug/bootimage-blog_os.bin
ohjelman pitäisi toimia.

Ohjelman voi ajaa komennolla "cargo run", kun lisätään .cargo/config.toml -tiedostoon rivit:
[target.'cfg(target_os = "none")']
runner = "bootimage runner"

Tämän jälkeen yksinkertainen "cargo run" -komento käynnistää Qemun ja siinä kirjoittamamme "käyttöjärjestelmän".

250228:
Ohjelma ei lähtenyt käyntiin. Ilmeisesti nightly channel ei ole pysynyt projektin compiler-asetuksena. -> rustup override set nightly korjasi tilanteen ja lisäsin vielä .cargo/config.toml-tiedostoon rivit:
[toolchain]
channel = "nightly"
Josko tämä jatkossa ei enää herjaisi! ..tuo pitää mahdollisesti laittaa Cargo.toml-tiedostoon, mutta olkoon nyt näin.

Luomme VGA-bufferiin kirjoittamiselle oman modulin vga_buffer.
Tänne tehdään toiminnot, joiden avulla voimme käyttää grafiikkasuorittimen omaa ASCII-taulukkoa (Code page 437) sen sisältämien merkkien tulostamiseksi ruudulle. Näihin kannattaa varmaan tutustua tarkemmin, mutta käytännössä luomme kirjoittajan, jossa on pointteri VGA bufferin kirjoitustaulukon ensimmäiseen alkioon, josta laskemalla bitteinä haemme haluamamme ominaisuudet ruudulle tulostettavalle merkille. Ominaisuuksiin sisältyy tulostettavan merkin väri ja sen taustaväri. Jos haluamamme kirjain tai merkki ei löydy taulukosta, tulostamme tialle pelkän laatikon. Esim ääkköset näkyvät tulostettaessa laatikoina.

Writerilla on nyt kaksi kirjoitusfunktiota: write_byte() ja write_string(), joista jälkimmäinen tulostaa ensimmäisen avulla kokonaisen merkkijonon (string).

BUFFER_WIDTH ja BUFFER_HEIGHT viittaavat VGA:n Code page 437:n kokoon taulukkona. Se on siis 25*80 ascii-merkin kokoinen taulukko grafiikkasuorittimen muistissa ja sitä tässä käytämme viittaamalla sen sisältämiin merkkeihin pointterilla (unsafe).

VOLATILE



